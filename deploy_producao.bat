@echo off
echo üöÄ DEPLOY PARA PRODU√á√ÉO - NOVA VERS√ÉO
echo ======================================

echo.
echo üìã Verificando arquivos essenciais...

if exist requirements.txt (
    echo ‚úÖ requirements.txt
) else (
    echo ‚ùå requirements.txt n√£o encontrado
    goto :error
)

if exist netlify.toml (
    echo ‚úÖ netlify.toml
) else (
    echo ‚ùå netlify.toml n√£o encontrado
    goto :error
)

if exist functions\api.py (
    echo ‚úÖ functions\api.py
) else (
    echo ‚ùå functions\api.py n√£o encontrado
    goto :error
)

if exist index.html (
    echo ‚úÖ index.html
) else (
    echo ‚ùå index.html n√£o encontrado
    goto :error
)

if exist "PDFs\Roteiro de Dsispensa√ß√£o - Hansen√≠ase F.docx.pdf" (
    echo ‚úÖ PDF da tese encontrado
) else (
    echo ‚ùå PDF da tese n√£o encontrado
    goto :error
)

echo.
echo üîß Configurando arquivos para produ√ß√£o...

REM Criar arquivo de configura√ß√£o de produ√ß√£o
echo [build] > netlify_production.toml
echo   publish = "." >> netlify_production.toml
echo   command = "bash netlify_build_fix.sh" >> netlify_production.toml
echo   functions = "functions" >> netlify_production.toml
echo. >> netlify_production.toml
echo [[redirects]] >> netlify_production.toml
echo   from = "/api/*" >> netlify_production.toml
echo   to = "/.netlify/functions/api/:splat" >> netlify_production.toml
echo   status = 200 >> netlify_production.toml
echo   force = true >> netlify_production.toml
echo. >> netlify_production.toml
echo [[redirects]] >> netlify_production.toml
echo   from = "/*" >> netlify_production.toml
echo   to = "/index.html" >> netlify_production.toml
echo   status = 200 >> netlify_production.toml
echo. >> netlify_production.toml
echo [build.environment] >> netlify_production.toml
echo   PYTHON_VERSION = "3.9" >> netlify_production.toml
echo   NODE_VERSION = "18" >> netlify_production.toml
echo   ENABLE_SYNONYMS = "true" >> netlify_production.toml
echo   ENABLE_CONTEXT_EXTRACTION = "true" >> netlify_production.toml
echo   CONFIDENCE_THRESHOLD = "0.3" >> netlify_production.toml
echo   MAX_CHUNKS = "3" >> netlify_production.toml
echo   CHUNK_SIZE = "1500" >> netlify_production.toml
echo   CHUNK_OVERLAP = "300" >> netlify_production.toml
echo. >> netlify_production.toml
echo [functions] >> netlify_production.toml
echo   directory = "functions" >> netlify_production.toml
echo   node_bundler = "esbuild" >> netlify_production.toml
echo   included_files = ["PDFs/**/*"] >> netlify_production.toml
echo   external_node_modules = ["@netlify/functions"] >> netlify_production.toml
echo. >> netlify_production.toml
echo [[headers]] >> netlify_production.toml
echo   for = "/api/*" >> netlify_production.toml
echo   [headers.values] >> netlify_production.toml
echo     Access-Control-Allow-Origin = "*" >> netlify_production.toml
echo     Access-Control-Allow-Headers = "Content-Type" >> netlify_production.toml
echo     Access-Control-Allow-Methods = "POST, OPTIONS" >> netlify_production.toml

echo ‚úÖ netlify_production.toml criado

echo.
echo üì¶ Criando arquivo ZIP para deploy...

REM Criar ZIP com todos os arquivos necess√°rios
powershell -Command "Compress-Archive -Path 'requirements.txt', 'netlify_production.toml', 'netlify_build_fix.sh', 'functions', 'index.html', 'PDFs', '.gitignore', 'runtime.txt', '.python-version' -DestinationPath 'deploy_producao.zip' -Force"
REM Garantir que o arquivo functions/api.py est√° inclu√≠do e destacado como principal backend
powershell -Command "Compress-Archive -Path 'functions/api.py' -DestinationPath 'deploy_producao.zip' -Force"

if exist deploy_producao.zip (
    echo ‚úÖ deploy_producao.zip criado com sucesso!
    echo üìä Tamanho do arquivo: 
    powershell -Command "Get-ChildItem 'deploy_producao.zip' | Select-Object Name, @{Name='Size(MB)';Expression={[math]::Round($_.Length/1MB,2)}}"
) else (
    echo ‚ùå Erro ao criar ZIP
    goto :error
)

echo.
echo üéØ OP√á√ïES DE DEPLOY:
echo.
echo 1Ô∏è‚É£ DEPLOY AUTOM√ÅTICO (Recomendado):
echo    - V√° para https://netlify.com
echo    - Fa√ßa login ou crie conta
echo    - Clique em "Add new site" ‚Üí "Deploy manually"
echo    - Arraste o arquivo deploy_producao.zip
echo    - Configure:
echo      ‚Ä¢ Build command: bash netlify_build_fix.sh
echo      ‚Ä¢ Publish directory: .
echo      ‚Ä¢ Functions directory: functions
echo.
echo 2Ô∏è‚É£ DEPLOY VIA GITHUB:
echo    - Se voc√™ tem Git instalado, execute:
echo      git add .
echo      git commit -m "Nova vers√£o para produ√ß√£o"
echo      git push origin main
echo    - Conecte seu reposit√≥rio no Netlify
echo.
echo 3Ô∏è‚É£ DEPLOY MANUAL:
echo    - Use o arquivo deploy_producao.zip
echo    - Fa√ßa upload no Netlify
echo.
echo üìù ARQUIVOS INCLU√çDOS NO DEPLOY:
echo    ‚úÖ requirements.txt (depend√™ncias Python)
echo    ‚úÖ netlify_production.toml (configura√ß√£o otimizada)
echo    ‚úÖ netlify_build_fix.sh (script de build)
echo    ‚úÖ functions/api.py (API do chatbot)
echo    ‚úÖ index.html (interface do usu√°rio)
echo    ‚úÖ PDFs/ (arquivo da tese)
echo    ‚úÖ .gitignore (arquivos ignorados)
echo    ‚úÖ runtime.txt (vers√£o Python)
echo    ‚úÖ .python-version (compatibilidade)
echo.
echo üöÄ PRONTO PARA DEPLOY!
echo O arquivo deploy_producao.zip est√° pronto para upload no Netlify.
echo.
pause
goto :end

:error
echo.
echo ‚ùå ERRO: Verifique se todos os arquivos est√£o presentes
echo.
pause
exit /b 1

:end
echo.
echo ‚úÖ Script de deploy conclu√≠do com sucesso! 